import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from python_aternos import Client
from AdminData import *
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Aternos
at_client = Client()
try:
    at_client.login(ADMIN_USERNAME, ADMIN_PASSWORD)
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Aternos")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    raise

aternos = at_client.account
servers = aternos.list_servers()
serv = servers[0]


@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        return await message.answer("üõë –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        
    await message.answer(
        "<b>Aternos Control Bot</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/serverlist - —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
        "/startserv - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
        "/stopserv - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
        "/restartserv - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n\n"
        "‚ö†Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
        parse_mode="HTML"
    )


async def check_server_status(status, interval=15, timeout=300):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
    start_time = time.time()
    while time.time() - start_time < timeout:
        serv.fetch()
        if serv.status == status:
            return True
        await asyncio.sleep(interval)
    return False


@dp.message(Command("startserv"))
async def cmd_startserv(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        return await message.answer("üõë –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    status_msg = await message.answer("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        serv.start()
        if await check_server_status(status="online"):
            await status_msg.edit_text("üü¢ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        else:
            await status_msg.edit_text("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 7.5 –º–∏–Ω—É—Ç")
    except Exception as e:
        await message.answer(f"Error: {e}")


@dp.message(Command("stopserv"))
async def cmd_stopserv(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        return await message.answer("üõë –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    
    status_msg = await message.answer("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        serv.stop()
        if await check_server_status(status="offline"):
            await status_msg.edit_text("üü¢ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        else:
            await status_msg.edit_text("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        await message.answer(f"Error: {e}")


@dp.message(Command("restartserv"))
async def cmd_restartserv(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        return await message.answer("üõë –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    status_msg = await message.answer("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        serv.restart()
        if await check_server_status(status="online"):
            await status_msg.edit_text("üü¢ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!")
    except Exception as e:
        await message.answer(f"Error: {e}")


@dp.message(Command("serverlist"))
async def cmd_serverlist(message: types.Message):
    if message.from_user.id not in ALLOWED_USERS:
        return await message.answer("üõë –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    if not servers:
        await message.answer("üõë –°–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        await message.answer(f"–ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(servers)}\n")
    
    for i, server in enumerate(servers, 1):
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
        server.fetch()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info = (
            f"üîπ –°–µ—Ä–≤–µ—Ä #{i}\n"
            f"–ò–º—è: {server.subdomain or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
            f"–°—Ç–∞—Ç—É—Å: {server.status}\n"
            f"–ê–¥—Ä–µ—Å: {server.address if hasattr(server, 'address') else 'N/A'}\n"
            f"–ò–≥—Ä–æ–∫–æ–≤: {getattr(server, 'players_count', 'N/A')}/{getattr(server, 'slots', 'N/A')}\n"
            f"–í–µ—Ä—Å–∏—è: {getattr(server, 'software', 'N/A')}\n"
        )
        await message.answer(info)


async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())